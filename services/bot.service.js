const moment = require('moment-timezone')
moment.locale('ru');
const axios = require('axios')
const EventBus = require('../eventBus')
const _ = require('lodash')
const crmidcfg = require('./crm-id-cfg.json')

module.exports = {
    sendNewOrderToCoruier,
    sendOrderDetailsToCourier,
    sendErrorMessage,
    sendUpdatedOrderToCourier,
}

function newOrderMessage(data) {
    let msg = ''
    data.updating ? msg += '‚ö† ‚ôª –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω\n' : null
    if (data.delivery_type === 'courier') {
        msg += !data.is_return ? `üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</b>` : `‚õî <b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç</b>`
        msg += `\n<code>#${data.order_id}</code>\n`
        msg += `\n<b>–ê–¥—Ä–µ—Å:</b> ${data.shipping_address}`
        msg += `\n<b>–°–æ—Å—Ç–∞–≤:</b> ${data.order_items}`
        msg += `\n<b>–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.comment}`
        msg += `\n<b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${toPrettyMscTime(data.shipping_date)}`
    } else if (data.delivery_type === 'sdek') {
        msg += !data.is_return ? `üöõ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ø—É–Ω–∫—Ç –°–î–≠–ö</b>` : `‚õî <b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç</b>`
        msg += `\n<code>#${data.order_id}</code>\n`
        msg += `\n<b>‚Ññ –°–î–≠–ö:</b> ${data.sdek_id}`
        msg += `\n<b>–°–æ—Å—Ç–∞–≤:</b> ${data.order_items}`
        msg += `\n<b>–ê–¥—Ä–µ—Å:</b> ${data.shipping_address}`
        msg += `\n<b>–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.comment}`
    }
    return msg
}

async function orderDetailsMessage(data) {
    const link = await createMapLink(data.shipping_address)
    console.log('function orderDetailsMessage')
    let msg = `üìç <b>–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n`
    data.updating ? msg += '‚ö† ‚ôª –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω\n' : null
    msg += `\n<code>#${data.order_id}</code>\n`
    msg += `\n<b>–ò–º—è:</b> ${data.contact_name}`
    msg += `\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.contact_phone}`
    msg += `\n<b>–ê–¥—Ä–µ—Å:</b> ${data.shipping_address}`
    msg += `\n<b>–°–æ—Å—Ç–∞–≤:</b> ${data.order_items}`
    msg += `\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.comment}`
    msg += `\n\n<a href="${link}"> üìç –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n`
    msg += `\n<b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${toPrettyMscTime(data.shipping_date)}`
    return msg;
}

function newOrderReplyMarkup(data) {
    return {
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: data.delivery_type === 'courier' ? "–ü—Ä–∏–Ω—è—Ç—å" : "‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª",
                        callback_data: data.delivery_type === 'courier' ? `ACCEPT_SHIPPING_${data.order_id}` : `SHIPPING_SUCCESS_${data.order_id}`
                    },
                    {
                        text: data.delivery_type === 'courier' ? "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è" : "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data: data.delivery_type === 'courier' ? `REJECT_SHIPPING_${data.order_id}` : `REJECT_SHIPPING_${data.order_id}`
                    }
                ]
            ]
        }
    }
}

function orderDetailsReplyMarkup(data) {
    return {
        parse_mode: "HTML",
        disable_web_page_preview: true,
        reply_markup: {
            inline_keyboard: [
                [
                    {text: "‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data: `SHIPPING_SUCCESS_${data.order_id}`},
                    {text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `REJECT_SHIPPING_${data.order_id}`}
                ]
            ]
        }
    }
}

/**
 * –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–∏–¥.
 * @param prevMessage
 * @returns {Promise<void>}
 */
async function sendUpdatedOrderToCourier(bot, payload) {
    try {
        await bot.telegram.deleteMessage(payload.msgLead.chat_id, payload.msgLead.message_id)
    } catch (e) {
        console.log('cant delete a fuckin meesage')
    }
    payload.crmLead.updating = true
    
    if (payload.crmLead.msg_type === "onNewOrderMsc" || payload.crmLead.msg_type === "onNewOrderSdek"
        || payload.crmLead.msg_type === "onReturnMsc" || payload.crmLead.msg_type === "onReturnSdek")
        await bot.telegram.sendMessage(
            payload.msgLead.chat_id,
            newOrderMessage(payload.crmLead),
            newOrderReplyMarkup(payload.crmLead)
        ).then(ctx => {
            emitMsgSentEvent(ctx, payload.crmLead)
        })

    if ( payload.crmLead.msg_type === "onAcceptedOrderMsc" )
        await bot.telegram.sendMessage(
            payload.msgLead.chat_id,
            await orderDetailsMessage(payload.crmLead),
            orderDetailsReplyMarkup(payload.crmLead)
        ).then(ctx => {
            emitMsgSentEvent(ctx, payload.crmLead)
        })
}

async function sendNewOrderToCoruier(bot, chatId, data) {

    return bot.telegram.sendMessage(chatId, newOrderMessage(data), newOrderReplyMarkup(data))
        .then(ctx => {
            emitMsgSentEvent(ctx, data)
        })
}


async function sendOrderDetailsToCourier(bot, chatId, data) {
// todo —É–¥–∞–ª—è—Ç—å —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ

    await bot.telegram.sendMessage(chatId, await orderDetailsMessage(data), orderDetailsReplyMarkup(data))
        .then(ctx => {
            emitMsgSentEvent(ctx, data)
        })
}

// todo –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ

async function sendErrorMessage(chatId, message) {
    await bot.telegram.sendMessage(chatId, message, {parse_mode: "MarkdownV2",})
}

function emitMsgSentEvent(ctx, data) {
    const orderdata = _.pick(data,
        [
            'lead_id', 'status_id', 'pipeline_id', 'created_at',
            'updated_at', 'order_items', 'lead_id', 'shipping_date',
            'shipping_address', 'contact_name', 'contact_phone',
            'sdek_id', 'msg_type', 'comment', 'upcoming_status'
        ])
    const ctxdata =
        {
            message_id: ctx.message_id,
            chat_id: ctx.chat.id,
            username: ctx.chat.username,
            ...orderdata
        }
    EventBus.emit('msg.sent', {...ctxdata})
}


async function createMapLink(address) {

    const YMapsRes = await axios.get('https://geocode-maps.yandex.ru/1.x/', {
        params: {
            apikey: process.env.Y_MAPS_API_KEY,
            geocode: address,
            format: 'json'
        }
    })
    const pos = YMapsRes.data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.replace(' ', ',')
    const link = `https://yandex.ru/maps/?pt=${pos}&z=15.46`

    return link
}

function toPrettyMscTime(dateTime) {
    return moment(dateTime).tz('Europe/Moscow').format('Do MMM YY')
}
